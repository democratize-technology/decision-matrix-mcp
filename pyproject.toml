[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "decision-matrix-mcp"
version = "0.1.0"
description = "MCP server for structured decision analysis using thread orchestration"
readme = "README.md"
license = { text = "MIT" }
requires-python = ">=3.10"
authors = [
    { name = "Democratize Technology", email = "contact@democratize.technology" }
]
keywords = ["mcp", "decision-analysis", "ai", "llm", "model-context-protocol"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Environment :: Console",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
]
dependencies = [
    "mcp>=1.12.0",
    "httpx>=0.28.1",
    "pydantic>=2.9.0",
    "litellm>=1.75.0",
    "boto3>=1.40.0",
    "chain-of-thought-tool",
    "psutil>=6.1.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=8.4.1",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.0.0",
    "pytest-benchmark>=4.0.0",
    "pytest-timeout>=2.1.0",
    "pytest-xdist>=3.0.0",
    "ruff>=0.12.11",
    "black>=24.4.2",
    "mypy>=1.10.0",
    "isort>=5.13.2",
    "pre-commit>=3.7.0",
    "bandit>=1.7.8",
    "safety>=3.5.0",
    "pydocstyle>=6.3.0",
    "types-requests",
    "types-urllib3",
    "types-PyYAML",
    "types-psutil",
    "boto3-stubs[essential]",
]

[project.scripts]
decision-matrix = "decision_matrix_mcp:main"

[project.urls]
Homepage = "https://github.com/democratize-technology/decision-matrix-mcp"
Repository = "https://github.com/democratize-technology/decision-matrix-mcp.git"
Issues = "https://github.com/democratize-technology/decision-matrix-mcp/issues"

[tool.hatch.build.targets.wheel]
packages = ["src/decision_matrix_mcp"]

[tool.hatch.metadata]
allow-direct-references = true

[tool.ruff]
target-version = "py310"
line-length = 100
exclude = [
    ".git",
    "__pycache__",
    ".venv",
    "build",
    "dist",
    "*.egg-info",
]

[tool.ruff.lint]
select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings
    "F",   # pyflakes
    "I",   # isort
    "B",   # flake8-bugbear
    "C4",  # flake8-comprehensions
    "UP",  # pyupgrade
    "D",   # pydocstyle
    "N",   # pep8-naming
    "YTT", # flake8-2020
    "ANN", # flake8-annotations (minimal)
    "S",   # bandit security
    "BLE", # flake8-blind-except
    "COM", # flake8-commas
    "C90", # mccabe complexity
    "DTZ", # flake8-datetimez
    "EM",  # flake8-errmsg
    "ISC", # flake8-implicit-str-concat
    "ICN", # flake8-import-conventions
    "G",   # flake8-logging-format
    "PIE", # flake8-pie
    "T20", # flake8-print
    "PT",  # flake8-pytest-style
    "Q",   # flake8-quotes
    "RET", # flake8-return
    "SIM", # flake8-simplify
    "TCH", # flake8-type-checking
    "ARG", # flake8-unused-arguments
    "PTH", # flake8-use-pathlib
    "ERA", # eradicate
    "PD",  # pandas-vet
    "PGH", # pygrep-hooks
    "PL",  # pylint
    "TRY", # tryceratops
    "FLY", # flynt
    "PERF", # perflint
    "RUF", # ruff-specific
]
ignore = [
    "E501",   # line too long, handled by black
    "B008",   # do not perform function calls in argument defaults
    "C901",   # too complex
    "UP038",  # Use X | Y in isinstance - prefer tuple syntax
    "D100",   # missing docstring in public module
    "D104",   # missing docstring in public package
    "D105",   # missing docstring in magic method
    "D107",   # missing docstring in __init__
    "ANN101", # missing type annotation for self
    "ANN102", # missing type annotation for cls
    "ANN401", # dynamically typed expressions (Any)
    "S101",   # use of assert
    "S608",   # possible SQL injection
    "PLR0912", # too many branches (temp: parsing complexity)
    "PLR0913", # too many arguments
    "PLR2004", # magic value used in comparison
    "TRY003", # avoid specifying long messages outside exception class
    "EM101",  # string literal in exception
    "EM102",  # f-string in exception
    "COM812", # missing trailing comma (conflicts with formatter)
    "ISC001", # single line implicit string concatenation (conflicts with formatter)
]

[tool.ruff.lint.per-file-ignores]
"__init__.py" = ["F401", "F403"]
"tests/**" = ["D", "S", "ANN", "PLR2004", "SLF001", "ARG001", "ARG002", "BLE001", "SIM117", "RUF003", "ERA001", "B023", "PERF401", "F841", "PLR0912", "PLR0915", "B007", "B017", "PT011", "PT012", "PTH123", "PTH108", "PT004", "PERF203", "TRY002"]
"test_*.py" = ["D", "S", "ANN", "PLR2004", "SLF001", "ARG001", "ARG002", "BLE001", "SIM117", "RUF003", "ERA001", "B023", "PERF401", "F841", "PLR0912", "PLR0915", "B007", "B017", "PT011", "PT012", "PTH123", "PTH108", "PT004", "PERF203", "TRY002"]
"conftest.py" = ["D", "S", "ANN", "ARG001", "ARG002", "BLE001"]

[tool.ruff.lint.isort]
combine-as-imports = true
force-sort-within-sections = true
known-first-party = ["decision_matrix_mcp"]
split-on-trailing-comma = true

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.ruff.lint.mccabe]
max-complexity = 10

[tool.black]
target-version = ['py310']
include = '\.pyi?$'
line-length = 100
skip-string-normalization = false
skip-magic-trailing-comma = false
extend-exclude = '''
(
  /(
      \.git
    | \.venv
    | build
    | dist
    | __pycache__
  )/
)
'''

[tool.mypy]
python_version = "3.10"
check_untyped_defs = true
disallow_any_generics = true
disallow_incomplete_defs = true
disallow_untyped_defs = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_return_any = true
warn_unreachable = true
strict_equality = true
extra_checks = true
show_error_codes = true
show_column_numbers = true
color_output = true
error_summary = true

[[tool.mypy.overrides]]
module = [
    "litellm.*",
    "boto3.*",
    "botocore.*",
    "mcp.*",
    "chain_of_thought_tool.*",
    "httpx.*"
]
ignore_missing_imports = true

[[tool.mypy.overrides]]
module = "tests.*"
ignore_errors = true

[tool.isort]
profile = "black"
line_length = 100
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true
combine_as_imports = true
force_sort_within_sections = true
known_first_party = ["decision_matrix_mcp"]
known_third_party = [
    "pytest",
    "pydantic",
    "httpx",
    "litellm",
    "boto3",
    "botocore",
    "mcp",
    "chain_of_thought_tool"
]
skip_glob = ["**/__pycache__/**", "**/build/**", "**/dist/**"]

[tool.bandit]
exclude_dirs = ["tests", "test_*"]
skips = ["B101", "B601"]  # Skip assert_used and shell_injection_process

[tool.pydocstyle]
convention = "google"
add_ignore = ["D100", "D104", "D105", "D107"]
match_dir = "^(?!tests|test_).*"

[dependency-groups]
dev = [
    "types-psutil>=7.0.0.20250801",
]
